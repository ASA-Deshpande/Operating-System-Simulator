// OS Phase 2

// addressmap madhe check pages
// gd read kela ki handle pagefault
// H is not being read
// mastermode func
// SI need not be passed to MM
// Change visibility while inheriting
// checkTime verify

#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iostream>
#include <math.h>
#include <string.h>
#include <typeinfo>
#include <vector>

using namespace std;

#define EMPTY '\0'
typedef uint8_t byte;
typedef uint16_t u16;
typedef size_t ulong;

class pcb
{

    // private:
public:
    int jobID, TTC, LLC, TTL, TLL;
    void pcb_init(string);
    void displayPCB();
};

class cpu : public pcb
{

private:
    byte m[100][4];
    byte IR[4];
    u16 IC;
    byte R[4];
    bool C;
    char buffer[40];

    int SI, PI, TI;
    int PTrow;

    int VA, RA, EM;
    int PTR[4];

public:
    void init();
    void masterMode(int, int);
    void read(int);
    void write(int);
    void halt();
    void executeUserProgram();
    void loadRegister(int);
    void storeRegister(int);
    void compareRegister(int);
    void branch(int);
    void startExecution();
    void load();
    void bufferReset();
    void printMemory();
    string replaceString(string, const std::string&, const string&);

    int allocate();
    bool checkIfMemoryAvailable(int);
    void setPTR(int);
    void pageTableInit();
    void updatePT(int);
    int addressMap(int);
    bool checkForPage(int);
    void checkTime();
    int getStartAddr();

    ifstream inFile;
    ofstream outFile;
};

void pcb ::pcb_init(string s)
{
    TTC = LLC = 0;
    jobID = stoi(s.substr(4, 4));
    TTL = stoi(s.substr(8, 4));
    TLL = stoi(s.substr(12, 4));
}

void pcb ::displayPCB()
{
    cout << "Job id is: " << jobID << endl;
    cout << "TTC is: " << TTC << endl;
    cout << "LLC is: " << LLC << endl;
    cout << "TTL is: " << TTL << endl;
    cout << "TLL is: " << TLL << endl;
}

int cpu ::getStartAddr()
{
    int myPTR = 0;
    for(int i = 0; i < 4; i++) {
	myPTR = PTR[i] + myPTR * 10;
    }
    return myPTR;
}

void cpu ::printMemory()
{
    // print memory to check if enterred correctly
    for(int a = 0; a < 100; a++) {
	for(int b = 0; b < 4; b++) {
	    cout << "m[" << a << "][" << b << "]: " << m[a][b] << " ";
	}
	cout << endl;
    }
}

void cpu ::bufferReset()
{
    memset(buffer, EMPTY, sizeof(buffer));
}

string cpu ::replaceString(string subject, const std::string& search, const string& replace)
{
    ulong pos = 0;
    while((pos = subject.find(search, pos)) != string::npos) {
	subject.replace(pos, search.length(), replace);
	pos += replace.length();
    }
    return subject;
}

void cpu::init()
{

    bufferReset();
    memset(m, EMPTY, sizeof(m));
    memset(IR, EMPTY, sizeof(IR));
    memset(R, EMPTY, sizeof(R));
    memset(PTR, EMPTY, sizeof(PTR));
    IC = -12;
    C = 0;
    SI = 3;
    PI = 0;
    TI = 0;
    PTrow = 0;
}

void cpu ::read(int address)
{
    bufferReset();
    if(address % 10 != 0) {
	return;
    }
    inFile.getline(buffer, 41);
    if(buffer[0] == '$' && buffer[1] == 'E' && buffer[2] == 'N' && buffer[3] == 'D') {
	return;
    }

    memcpy(m[address], buffer, sizeof(buffer));

    SI = 0;
}

void cpu ::write(int address)
{
    bufferReset();
    memcpy(buffer, m[address], 41);
    outFile << buffer << endl;

    SI = 0;
}

void cpu ::halt()
{
    cout << "Halting current program." << endl;
    outFile << endl << endl;
}

void cpu::masterMode(int SI, int address)
{

    // cout << "Inside MM;" << SI << endl;

    switch(SI) {
	// cout << "Inside switch";
    case 1: {

	// cout << "Read hi";
	read(address);

	break;
    }

    case 2: {

	write(address);

	break;
    }

    case 3: {
	cout << "Inside halt";
	halt();
	break;
    }

    default: {
	break;
    }
    }
}

void cpu ::storeRegister(int address)
{
    memcpy(m[address], R, 4);
}

void cpu ::loadRegister(int address)
{
    memcpy(R, m[address], 4);
}

void cpu ::compareRegister(int address)
{
    bool equal = true;
    for(int i = 0; i < 4; ++i) {
	if(m[address][i] != R[i]) {
	    equal = false;
	    break;
	}
    }
    C = equal;
}

void cpu ::branch(int address)
{
    if(C) {
	IC = address;
    }
}

bool cpu ::checkForPage(int RA)
{

    int myPTR = getStartAddr();

    vector<int> addresses;

    for(int i = myPTR; i < (myPTR + 10); i++) {
	vector<char> address;
	for(int j = 0; j < 4; j++) {
	    if(m[i][j] == '*') {
		
		break;
	    } else {
		address.push_back(m[i][j]);
	    }
	}

	std::string str(address.begin(), address.end());
	addresses.push_back(stoi(str));
    }

    for(auto i = addresses.begin(); i != addresses.end(); ++i)
	cout << *i << " ";

    return true;
}

int cpu ::addressMap(int VA)
{

    if(VA < 0 || VA > 99) {
	PI = 2;
	return -1;
    }

    int RA;

    int myPTR = 0;
    int mPTE = 0;

    for(int i = 0; i < 4; i++) {
	myPTR = PTR[i] + myPTR * 10;
    }

    // cout<<"myPTR: "<<myPTR<<endl;

    int PTE = (VA / 10) + myPTR;

    // cout<<"PTE: "<<PTE<<endl;

    for(int i = 0; i < 4; i++) {

	// cout<<m[PTE][i]<<" ";

	if(m[PTE][i] == '*') {
	    break;
	}

	mPTE = (m[PTE][i] - '0') + (mPTE * 10);
	// cout<<"mPTE at every stage: "<<mPTE<<endl;
    }

    // cout<<"mPTE: "<<mPTE<<endl;

    RA = (mPTE * 10) + (VA % 10);
    // cout<<"RA "<<RA<<endl;

    //   if(!checkForPage(RA)) {
    // PI = 3;
    // return -1;
    //   }

    return RA;
}

void cpu ::checkTime()
{
    if(TTC >= TTL) {
	TI = 2;
    }
}

void cpu ::executeUserProgram()
{

    printMemory();

    bool check = checkForPage(0);

    // user Mode
    while((PI == 0) && (TI == 0)) {

	int RA = addressMap(IC);
	// break;

	// if(PI != 0) {
	//     break;
	// }

	memcpy(IR, m[RA], 4);
	IC++;

	int address = (IR[2] - '0') * 10 + (IR[3] - '0');
	address = addressMap(address);

	// if(PI != 0) {
	//     break;
	// }

	if(IR[0] == 'G' && IR[1] == 'D') {

	    SI = 1;
	    masterMode(SI, address);
	    // cout<<"GD";
	    TTC += 2;

	    checkTime();

	} else if(IR[0] == 'P' && IR[1] == 'D') {

	    SI = 2;
	    masterMode(SI, address);
	    TTC++;
	    checkTime();

	} else if(IR[0] == 'H' && IR[1] == 0) {
	    cout << "IT's H!" << endl;
	    SI = 3;
	    cout << "before MM SI is: " << SI << endl;
	    masterMode(SI, address);

	    TTC++;
	    checkTime();
	    break;

	} else if(IR[0] == 'L' && IR[1] == 'R') {

	    loadRegister(address);
	    TTC++;

	} else if(IR[0] == 'S' && IR[1] == 'R') {

	    storeRegister(address);
	    TTC += 2;
	    checkTime();

	} else if(IR[0] == 'C' && IR[1] == 'R') {

	    compareRegister(address);
	    TTC++;
	    checkTime();

	} else if(IR[0] == 'B' && IR[1] == 'T') {

	    branch(address);
	    TTC++;
	    checkTime();

	} else {
	    PI = 1;
	}
    }

    if((PI != 0) || (TI != 0)) {
	masterMode(0, 0);
    }
}

void cpu ::startExecution()
{
    IC = 0;
    executeUserProgram();
}

bool cpu ::checkIfMemoryAvailable(int start)
{
    for(int i = start; i < (start + 10); i++) {
	for(int j = 0; j < 4; j++) {
	    if(m[i][j] != EMPTY) {
		return false;
	    }
	}
    }
    return true;
}

int cpu ::allocate()
{
    int random;
    while(true) {
	random = (rand() % 30);

	bool check = checkIfMemoryAvailable(random * 10);

	if(check) {
	    break;
	}
    }

    return random;
}

void cpu ::setPTR(int myPTR)
{

    int count = 3;

    while(myPTR != 0) {
	int num = myPTR % 10;

	PTR[count] = num;
	count--;

	myPTR = myPTR / 10;
    }

    //   for(int i = 0; i < 4; i++) {
    // cout << PTR[i] << " ";
    //   }
}

void cpu ::pageTableInit()
{

    int start = 0;

    for(int i = 0; i < 4; i++) {
	start = start * 10 + PTR[i];
    }

    for(int i = start; i < (start + 10); i++) {
	for(int j = 0; j < 4; j++) {
	    m[i][j] = '*';
	}
    }

    //   for(int i = start; i < (start + 10); i++) {
    // for(int j = 0; j < 4; j++) {
    //    cout << m[i][j] << ' ';
    //}

    // cout << endl;
    //   }
}

void cpu ::updatePT(int addr)
{

    string myAddr = to_string(addr);
    memcpy(m[PTrow], myAddr.c_str(), myAddr.length());
    PTrow++;
    // cout<<PTrow;
}

void cpu ::load()
{

    // LOAD
    string buff;

    while(getline(inFile, buff)) {

	if(buff.length() > 40) {
	    cout << "Invalid Card." << endl;
	    break;
	}

	// Check if Control Card AMJ
	if(buff.substr(0, 4) == "$AMJ") {

	    init();

	    // create and initialise PCB
	    pcb_init(buff);
	    // displayPCB();
	    //  break;

	    // allocate frame for Page Table and set PTR
	    int ptAddr = allocate() * 10;
	    setPTR(ptAddr);
	    PTrow = ptAddr;
	    // cout<<"PT row initialised: "<<PTrow<<endl;

	    // Initialise the Page Table
	    pageTableInit();
	    // break;

	}

	// Check if Control Card DTA
	else if(buff.substr(0, 4) == "$DTA") {

	    startExecution();
	}

	// Check if Control Card END
	else if(buff.substr(0, 4) == "$END") {

	    init();

	}

	// Else it's a program card
	else {
	    buff = replaceString(buff, "H", "H000");

	    int addr = allocate();
	    updatePT(addr);

	    // copy buffer contents to memory
	    // cout<<"Buffer contents: "<<buff<<endl;
	    memcpy(m[(addr * 10)], buff.c_str(), buff.length());
	    // printMemory();

	    bufferReset();
	}
    }
}

int main()
{

    cpu myCPU;

    myCPU.inFile.open("input.txt");
    myCPU.outFile.open("output.txt");

    myCPU.load();

    myCPU.inFile.close();
    myCPU.outFile.close();

    return 0;
}
